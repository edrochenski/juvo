// <copyright file="MessageCreateResponse.cs" company="https://gitlab.com/edrochenski/juvo">
// Licensed under the MIT License. See LICENSE in the project root for license information.
// </copyright>

namespace JuvoProcess.Net.Discord.Model
{
    using System;
    using System.Collections.Generic;
    using Newtonsoft.Json;

    /// <summary>
    /// Message Create response.
    /// </summary>
    public class MessageCreateResponse : GatewayPayload
    {
        /// <summary>
        /// Types of channel messages.
        /// </summary>
        public enum MessageType
        {
            /// <summary>
            /// Default.
            /// </summary>
            Default,

            /// <summary>
            /// Added recipient.
            /// </summary>
            RecipientAdd,

            /// <summary>
            /// Removed recipient.
            /// </summary>
            RecipientRemove,

            /// <summary>
            /// Call.
            /// </summary>
            Call,

            /// <summary>
            /// Channel name changed.
            /// </summary>
            ChannelNameChange,

            /// <summary>
            /// Channel icon changed.
            /// </summary>
            ChannelIconChange,

            /// <summary>
            /// Pinned message to the channel.
            /// </summary>
            ChannelPinnedMessage,

            /// <summary>
            /// Member joined the guild.
            /// </summary>
            GuildMemberJoin
        }

        /// <summary>
        /// Gets or sets the data.
        /// </summary>
        [JsonProperty(PropertyName = "d")]
        public new MessageCreateData Data { get; set; }

        /// <summary>
        /// Represents the data in a Message Create response.
        /// </summary>
        public class MessageCreateData
        {
            /// <summary>
            /// Gets or sets the attachments.
            /// </summary>
            public IEnumerable<Attachment> Attachments { get; set; }

            /// <summary>
            /// Gets or sets the author.
            /// </summary>
            /// <remarks>
            /// This is only a valid user if the message is from a user or a bot. If the
            /// message is generated by a webhook, the author object corresponds to the
            /// webhook's ID, username, and avatar. A message is generated by a webhook
            /// if the <see cref="MessageCreateData.WebhookId"/> is not null.
            /// </remarks>
            public User Author { get; set; }

            /// <summary>
            /// Gets or sets the ID of the channel the message was sent to.
            /// </summary>
            [JsonProperty(PropertyName = "channel_id")]
            public string ChannelId { get; set; }

            /// <summary>
            /// Gets or sets the content.
            /// </summary>
            public string Content { get; set; }

            /// <summary>
            /// Gets or sets the timestamp when the message was last edited.
            /// </summary>
            [JsonProperty(PropertyName = "edited_timestamp")]
            public DateTime? EditedTimestamp { get; set; }

            /// <summary>
            /// Gets or sets the emed objects.
            /// </summary>
            public IEnumerable<Embed> Embeds { get; set; }

            /// <summary>
            /// Gets or sets the ID of the guild the message was sent to.
            /// </summary>
            [JsonProperty(PropertyName = "guild_id")]
            public string GuildId { get; set; }

            /// <summary>
            /// Gets or sets the ID.
            /// </summary>
            public string Id { get; set; }

            /// <summary>
            /// Gets or sets a value indicating whether the message is pinned.
            /// </summary>
            [JsonProperty(PropertyName = "pinned")]
            public bool IsPinned { get; set; }

            /// <summary>
            /// Gets or sets a value indicating whether the message was sent using TTS.
            /// </summary>
            [JsonProperty(PropertyName = "tts")]
            public bool IsTts { get; set; }

            /// <summary>
            /// Gets or sets a value indicating whether the message mentions everyone.
            /// </summary>
            [JsonProperty(PropertyName = "mention_everyone")]
            public bool MentionEveryone { get; set; }

            /// <summary>
            /// Gets or sets the roles mentioned.
            /// </summary>
            public IEnumerable<string> MentionRoles { get; set; }

            /// <summary>
            /// Gets or sets the users mentioned.
            /// </summary>
            public IEnumerable<User> Mentions { get; set; }

            /// <summary>
            /// Gets or sets the reactions.
            /// </summary>
            public IEnumerable<Reaction> Reactions { get; set; }

            /// <summary>
            /// Gets or sets the timestamp.
            /// </summary>
            public DateTime Timestamp { get; set; }

            /// <summary>
            /// Gets or sets the type of message.
            /// </summary>
            public MessageType Type { get; set; }

            /// <summary>
            /// Gets or sets the ID of the webhook the message was sent from.
            /// </summary>
            [JsonProperty(PropertyName = "webhook_id")]
            public string WebhookId { get; set; }
        }
    }
}
